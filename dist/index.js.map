{
  "version": 3,
  "sources": ["../src/index.ts", "../src/routes/customer.ts", "../src/controllers/customer.ts", "../src/routes/orders.ts", "../src/controllers/orders.ts", "../src/routes/waiters.ts", "../src/controllers/waiters.ts", "../src/routes/tips.ts", "../src/controllers/tips.ts", "../src/routes/food.ts", "../src/controllers/food.ts", "../src/routes/chef.ts", "../src/controllers/chef.ts", "../src/routes/bills.ts", "../src/controllers/bills.ts", "../src/routes/contains.ts", "../src/controllers/contains.ts", "../src/utils/error.ts"],
  "sourcesContent": ["import express from 'express'\nimport { customerRoutes } from './routes/customer';\nimport { orderRoutes } from './routes/orders';\nimport { router as waitersRoutes } from './routes/waiters';\nimport { router as tipsRoutes } from './routes/tips';\nimport { router as foodRoutes } from './routes/food';\nimport { router as chefRoutes } from './routes/chef';\nimport { router as billRoutes } from './routes/bills';\nimport { router as containsRoutes } from './routes/contains';\nimport { errorHandler } from './utils/error';\n\nconst app = express()\n\napp.use(express.json());\napp.use('/customers', customerRoutes);\napp.use('/orders', orderRoutes);\napp.use('/waiters', waitersRoutes);\napp.use('/tips', tipsRoutes);\napp.use('/foods', foodRoutes);\napp.use('/chefs', chefRoutes);\napp.use('/bills', billRoutes);\napp.use('/contains', containsRoutes);\napp.use(errorHandler)\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(3000)\n\n\n\n", "import { Router } from \"express\";\nimport { add, deletee, getall, getbyid, update } from \"../controllers/customer\";  \n\nexport const customerRoutes = Router();\ncustomerRoutes.get('/', getall).get(\"/:id\",getbyid).post('/',add).put('/:id',update).delete(':/id',deletee);", "import { PrismaClient } from '@prisma/client'\nconst prisma = new PrismaClient()\nimport { NextFunction, Request, Response } from \"express\";\n\nexport const getall = async(req:Request,res:Response,next:NextFunction) => {\n   try {\n    const customers = await prisma.customer.findMany();\n     res.send(customers)\n   } catch (error) {\n    next(error)\n   }\n}\n \nexport const getbyid = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const id = req.params.id;\n    const customer = await prisma.customer.findUnique({\n      where: {\n        cust_id: parseInt(id),\n      },\n    });\n    res.send(customer);\n  } catch (error) {\n    next(error);\n  }\n};\n \nexport const add = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { cust_fname, cust_lname, contact_no } = req.body;\n    const newCustomer = await prisma.customer.create({\n      data: {\n        cust_fname,\n        cust_lname,\n        contact_no,\n      },\n    });\n    res.json(newCustomer);\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const update = async (req: Request, res: Response, next: NextFunction) => {\n try {\n   const { id } = req.params;\n   const { cust_fname, cust_lname, contact_no } = req.body;\n   const updatedCustomer = await prisma.customer.update({\n     where: {\n       cust_id: parseInt(id),\n     },\n     data: {\n       cust_fname,\n       cust_lname,\n       contact_no,\n     },\n   });\n   if (updatedCustomer) {\n     res.json(updatedCustomer);\n   } else {\n     res.status(404).json({ error: 'Customer not found' });\n   }\n } catch (error) {\n  next(error)\n }\n};\n\nexport const deletee = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { id } = req.params;\n    const deletedCustomer = await prisma.customer.delete({\n      where: {\n        cust_id: parseInt(id),\n      },\n    });\n    if (deletedCustomer) {\n      res.json(deletedCustomer);\n    } else {\n      res.status(404).json({ error: 'Customer not found' });\n    }\n  } catch (error) {\n    next(error)\n  }\n};\n\n", "import { Router } from \"express\";\nimport { getAllOrders,getOrderById,createOrder,updateOrder,deleteOrder } from \"../controllers/orders\";\nexport const orderRoutes = Router();\norderRoutes\n  .get('/', getAllOrders)\n  .get('/:id', getOrderById)\n  .post('/', createOrder)\n  .put('/:id', updateOrder)\n  .delete('/:id', deleteOrder);\n", "import { Request, Response, NextFunction } from 'express';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\n// GET /orders\nexport const getAllOrders = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const orders = await prisma.order.findMany();\n    res.json(orders);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// GET /orders/:id\nexport const getOrderById = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const id = req.params.id;\n    const order = await prisma.order.findUnique({\n      where: {\n        ord_no: parseInt(id),\n      },\n    });\n    res.send(order);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// POST /orders\nexport const createOrder = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { cust_id, waiter_id } = req.body;\n    const newOrder = await prisma.order.create({\n      data: {\n        cust_id: parseInt(cust_id),\n        waiter_id: parseInt(waiter_id),\n      },\n    });\n    res.json(newOrder);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// PUT /orders/:id\nexport const updateOrder = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const id = req.params.id;\n    const { cust_id, waiter_id } = req.body;\n    const updatedOrder = await prisma.order.update({\n      where: {\n        ord_no: parseInt(id),\n      },\n      data: {\n        cust_id: parseInt(cust_id),\n        waiter_id: parseInt(waiter_id),\n      },\n    });\n    res.json(updatedOrder);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// DELETE /orders/:id\nexport const deleteOrder = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const id = req.params.id;\n    const deletedOrder = await prisma.order.delete({\n      where: {\n        ord_no: parseInt(id),\n      },\n    });\n    res.json(deletedOrder);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// Router\n", "import express from 'express';\nimport {\n  getAllWaiters,\n  getWaiterById,\n  createWaiter,\n  updateWaiter,\n  deleteWaiter,\n} from '../controllers/waiters';\n\nexport const router = express.Router();\n\nrouter.get('/', getAllWaiters);\nrouter.get('/:id', getWaiterById);\nrouter.post('/', createWaiter);\nrouter.put('/:id', updateWaiter);\nrouter.delete('/:id', deleteWaiter);\n\nexport default router;\n", "import { Request, Response, NextFunction } from 'express';\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n\n// GET /waiters\nexport const getAllWaiters = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const waiters = await prisma.waiter.findMany({\n      include: {\n        Orders: true,\n        Tips: true,\n      },\n    });\n    res.json(waiters);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// GET /waiters/:id\nexport const getWaiterById = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { id } = req.params;\n    const waiter = await prisma.waiter.findUnique({\n      where: { waiter_id: Number(id) },\n      include: {\n        Orders: true,\n        Tips: true,\n      },\n    });\n    if (!waiter) {\n      return res.status(404).json({ message: 'Waiter not found' });\n    }\n    res.json(waiter);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// POST /waiters\nexport const createWaiter = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { waiter_fname, waiter_lname } = req.body;\n    const newWaiter = await prisma.waiter.create({\n      data: {\n        waiter_fname,\n        waiter_lname,\n      },\n    });\n    res.status(201).json(newWaiter);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// PUT /waiters/:id\nexport const updateWaiter = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { id } = req.params;\n    const { waiter_fname, waiter_lname } = req.body;\n    const updatedWaiter = await prisma.waiter.update({\n      where: { waiter_id: Number(id) },\n      data: {\n        waiter_fname,\n        waiter_lname,\n      },\n    });\n    if (!updatedWaiter) {\n      return res.status(404).json({ message: 'Waiter not found' });\n    }\n    res.json(updatedWaiter);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// DELETE /waiters/:id\nexport const deleteWaiter = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { id } = req.params;\n    const deletedWaiter = await prisma.waiter.delete({\n      where: { waiter_id: Number(id) },\n    });\n    if (!deletedWaiter) {\n      return res.status(404).json({ message: 'Waiter not found' });\n    }\n    res.json(deletedWaiter);\n  } catch (error) {\n    next(error);\n  }\n};\n", "import express from 'express';\nimport {\n  getAllTips,\n  getTipByIds,\n  createTip,\n  updateTip,\n  deleteTip,\n} from '../controllers/tips';\n\nexport const router = express.Router();\n\nrouter.get('/', getAllTips);\nrouter.get('/:customerId/:waiterId', getTipByIds);\nrouter.post('/', createTip);\nrouter.put('/:customerId/:waiterId', updateTip);\nrouter.delete('/:customerId/:waiterId', deleteTip);\n\n\n", "import { Request, Response, NextFunction } from 'express';\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n\n// GET /tips\nexport const getAllTips = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const tips = await prisma.tip.findMany({\n      include: {\n        customer: true,\n        waiter: true,\n      },\n    });\n    res.json(tips);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// GET /tips/:customerId/:waiterId\nexport const getTipByIds = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { customerId, waiterId } = req.params;\n    const tip = await prisma.tip.findUnique({\n      where: {\n        cust_id_waiter_id: {\n          cust_id: Number(customerId),\n          waiter_id: Number(waiterId),\n        },\n      },\n      include: {\n        customer: true,\n        waiter: true,\n      },\n    });\n    if (!tip) {\n      return res.status(404).json({ message: 'Tip not found' });\n    }\n    res.json(tip);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// POST /tips\nexport const createTip = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { cust_id, waiter_id, tip } = req.body;\n    const newTip = await prisma.tip.create({\n      data: {\n        cust_id,\n        waiter_id,\n        tip,\n      },\n    });\n    res.status(201).json(newTip);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// PUT /tips/:customerId/:waiterId\nexport const updateTip = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { customerId, waiterId } = req.params;\n    const { tip } = req.body;\n    const updatedTip = await prisma.tip.update({\n      where: {\n        cust_id_waiter_id: {\n          cust_id: Number(customerId),\n          waiter_id: Number(waiterId),\n        },\n      },\n      data: {\n        tip,\n      },\n    });\n    if (!updatedTip) {\n      return res.status(404).json({ message: 'Tip not found' });\n    }\n    res.json(updatedTip);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// DELETE /tips/:customerId/:waiterId\nexport const deleteTip = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { customerId, waiterId } = req.params;\n    const deletedTip = await prisma.tip.delete({\n      where: {\n        cust_id_waiter_id: {\n          cust_id: Number(customerId),\n          waiter_id: Number(waiterId),\n        },\n      },\n    });\n    if (!deletedTip) {\n      return res.status(404).json({ message: 'Tip not found' });\n    }\n    res.json(deletedTip);\n  } catch (error) {\n    next(error);\n  }\n};\n", "import express from 'express';\nimport {\n  getAllFoods,\n  getFoodById,\n  createFood,\n  updateFood,\n  deleteFood,\n} from '../controllers/food';\n\nexport const router = express.Router();\n\nrouter.get('/', getAllFoods);\nrouter.get('/:id', getFoodById);\nrouter.post('/', createFood);\nrouter.put('/:id', updateFood);\nrouter.delete('/:id', deleteFood);\n\n", "import { Request, Response, NextFunction } from 'express';\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n\n// GET /foods\nexport const getAllFoods = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const foods = await prisma.food.findMany({\n      include: {\n        chef: true,\n        Contains: true,\n      },\n    });\n    res.json(foods);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// GET /foods/:id\nexport const getFoodById = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { id } = req.params;\n    const food = await prisma.food.findUnique({\n      where: { item_no: Number(id) },\n      include: {\n        chef: true,\n        Contains: true,\n      },\n    });\n    if (!food) {\n      return res.status(404).json({ message: 'Food item not found' });\n    }\n    res.json(food);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// POST /foods\nexport const createFood = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { item_name, item_type, item_price, item_stock, chef_id } = req.body;\n    const newFood = await prisma.food.create({\n      data: {\n        item_name,\n        item_type,\n        item_price,\n        item_stock,\n        chef_id,\n      },\n    });\n    res.status(201).json(newFood);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// PUT /foods/:id\nexport const updateFood = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { id } = req.params;\n    const { item_name, item_type, item_price, item_stock, chef_id } = req.body;\n    const updatedFood = await prisma.food.update({\n      where: { item_no: Number(id) },\n      data: {\n        item_name,\n        item_type,\n        item_price,\n        item_stock,\n        chef_id,\n      },\n    });\n    if (!updatedFood) {\n      return res.status(404).json({ message: 'Food item not found' });\n    }\n    res.json(updatedFood);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// DELETE /foods/:id\nexport const deleteFood = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { id } = req.params;\n    const deletedFood = await prisma.food.delete({\n      where: { item_no: Number(id) },\n    });\n    if (!deletedFood) {\n      return res.status(404).json({ message: 'Food item not found' });\n    }\n    res.json(deletedFood);\n  } catch (error) {\n    next(error);\n  }\n};\n", "import express from 'express';\nimport {\n  getAllChefs,\n  getChefById,\n  createChef,\n  updateChef,\n  deleteChef,\n} from '../controllers/chef';\n\nexport const router = express.Router();\n\nrouter.get('/', getAllChefs);\nrouter.get('/:id', getChefById);\nrouter.post('/', createChef);\nrouter.put('/:id', updateChef);\nrouter.delete('/:id', deleteChef);\n\n\n", "import { Request, Response, NextFunction } from 'express';\n\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n\n\n// GET /chefs\nexport const getAllChefs = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const chefs = await prisma.chef.findMany({\n      include: {\n        Foods: true,\n      },\n    });\n    res.json(chefs);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// GET /chefs/:id\nexport const getChefById = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { id } = req.params;\n    const chef = await prisma.chef.findUnique({\n      where: { chef_id: Number(id) },\n      include: {\n        Foods: true,\n      },\n    });\n    if (!chef) {\n      return res.status(404).json({ message: 'Chef not found' });\n    }\n    res.json(chef);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// POST /chefs\nexport const createChef = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { chef_fname, chef_lname, chef_type } = req.body;\n    const newChef = await prisma.chef.create({\n      data: {\n        chef_fname,\n        chef_lname,\n        chef_type,\n      },\n    });\n    res.status(201).json(newChef);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// PUT /chefs/:id\nexport const updateChef = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { id } = req.params;\n    const { chef_fname, chef_lname, chef_type } = req.body;\n    const updatedChef = await prisma.chef.update({\n      where: { chef_id: Number(id) },\n      data: {\n        chef_fname,\n        chef_lname,\n        chef_type,\n      },\n    });\n    if (!updatedChef) {\n      return res.status(404).json({ message: 'Chef not found' });\n    }\n    res.json(updatedChef);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// DELETE /chefs/:id\nexport const deleteChef = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { id } = req.params;\n    const deletedChef = await prisma.chef.delete({\n      where: { chef_id: Number(id) },\n    });\n    if (!deletedChef) {\n      return res.status(404).json({ message: 'Chef not found' });\n    }\n    res.json(deletedChef);\n  } catch (error) {\n    next(error);\n  }\n};\n", "import express from 'express';\nimport {\n  getAllBills,\n  getBillById,\n  createBill,\n  updateBill,\n  deleteBill,\n} from '../controllers/bills';\n\nexport const router = express.Router();\n\nrouter.get('/', getAllBills);\nrouter.get('/:id', getBillById);\nrouter.post('/', createBill);\nrouter.put('/:id', updateBill);\nrouter.delete('/:id', deleteBill);\n\n\n", "import { Request, Response, NextFunction } from 'express';\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n// GET /bills\nexport const getAllBills = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const bills = await prisma.bill.findMany({\n      include: {\n        Order: true,\n      },\n    });\n    res.json(bills);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// GET /bills/:id\nexport const getBillById = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { id } = req.params;\n    const bill = await prisma.bill.findUnique({\n      where: { bill_no: Number(id) },\n      include: {\n        Order: true,\n      },\n    });\n    if (!bill) {\n      return res.status(404).json({ message: 'Bill not found' });\n    }\n    res.json(bill);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// POST /bills\nexport const createBill = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { tot_price, tax, discount, net_payable, ord_no } = req.body;\n    const newBill = await prisma.bill.create({\n      data: {\n        tot_price,\n        tax,\n        discount,\n        net_payable,\n        ord_no,\n      },\n    });\n    res.status(201).json(newBill);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// PUT /bills/:id\nexport const updateBill = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { id } = req.params;\n    const { tot_price, tax, discount, net_payable, ord_no } = req.body;\n    const updatedBill = await prisma.bill.update({\n      where: { bill_no: Number(id) },\n      data: {\n        tot_price,\n        tax,\n        discount,\n        net_payable,\n        ord_no,\n      },\n    });\n    if (!updatedBill) {\n      return res.status(404).json({ message: 'Bill not found' });\n    }\n    res.json(updatedBill);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// DELETE /bills/:id\nexport const deleteBill = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { id } = req.params;\n    const deletedBill = await prisma.bill.delete({\n      where: { bill_no: Number(id) },\n    });\n    if (!deletedBill) {\n      return res.status(404).json({ message: 'Bill not found' });\n    }\n    res.json(deletedBill);\n  } catch (error) {\n    next(error);\n  }\n};\n", "import express from 'express';\nimport {\n  getAllContains,\n  getContainsByIds,\n  createContains,\n  deleteContains,\n} from '../controllers/contains';\n\nexport const router = express.Router();\n\nrouter.get('/', getAllContains);\nrouter.get('/:itemId/:orderId', getContainsByIds);\nrouter.post('/', createContains);\nrouter.delete('/:itemId/:orderId', deleteContains);\n\nexport default router;\n", "import { Request, Response, NextFunction } from 'express';\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n\n// GET /contains\nexport const getAllContains = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const contains = await prisma.contains.findMany({\n      include: {\n        food: true,\n        order: true,\n      },\n    });\n    res.json(contains);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// GET /contains/:itemId/:orderId\nexport const getContainsByIds = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { itemId, orderId } = req.params;\n    const contain = await prisma.contains.findUnique({\n      where: {\n        item_no_ord_no: {\n          item_no: Number(itemId),\n          ord_no: Number(orderId),\n        },\n      },\n      include: {\n        food: true,\n        order: true,\n      },\n    });\n    if (!contain) {\n      return res.status(404).json({ message: 'Contains relation not found' });\n    }\n    res.json(contain);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// POST /contains\nexport const createContains = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { item_no, ord_no } = req.body;\n    const newContain = await prisma.contains.create({\n      data: {\n        item_no,\n        ord_no,\n      },\n    });\n    res.status(201).json(newContain);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// DELETE /contains/:itemId/:orderId\nexport const deleteContains = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const { itemId, orderId } = req.params;\n    const deletedContain = await prisma.contains.delete({\n      where: {\n        item_no_ord_no: {\n          item_no: Number(itemId),\n          ord_no: Number(orderId),\n        },\n      },\n    });\n    if (!deletedContain) {\n      return res.status(404).json({ message: 'Contains relation not found' });\n    }\n    res.json(deletedContain);\n  } catch (error) {\n    next(error);\n  }\n};\n", "import { Request, Response, NextFunction } from 'express';\n\ninterface ErrorWithStatus extends Error {\n  status?: number;\n}\n\nexport const errorHandler = (\n  err: ErrorWithStatus,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  let status = err.status || 500;\n\n  switch (status) {\n    case 400: {\n      const message = 'Bad Request';\n      return res.status(status).json({ message });\n    }\n    case 401: {\n      const message = 'Unauthorized';\n      return res.status(status).json({ message });\n    }\n    case 403: {\n      const message = 'Forbidden';\n      return res.status(status).json({ message });\n    }\n    case 404: {\n      const message = 'Not Found';\n      return res.status(status).json({ message });\n    }\n  }\n\n  console.error(err);\n\n  const message = 'Something went wrong. Please try again later.';\n  return res.status(status).json({ message });\n};\n"],
  "mappings": "oeAAA,IAAAA,EAAoB,sBCApB,IAAAC,EAAuB,mBCAvB,IAAAC,EAA6B,0BACvBC,EAAS,IAAI,eAGNC,EAAS,MAAMC,EAAYC,EAAaC,IAAsB,CACxE,GAAI,CACH,IAAMC,EAAY,MAAML,EAAO,SAAS,SAAS,EAChDG,EAAI,KAAKE,CAAS,CACpB,OAASC,EAAO,CACfF,EAAKE,CAAK,CACX,CACH,EAEaC,EAAU,MACrBL,EACAC,EACAC,IACG,CACH,GAAI,CACF,IAAMI,EAAKN,EAAI,OAAO,GAChBO,EAAW,MAAMT,EAAO,SAAS,WAAW,CAChD,MAAO,CACL,QAAS,SAASQ,CAAE,CACtB,CACF,CAAC,EACDL,EAAI,KAAKM,CAAQ,CACnB,OAASH,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAEaI,EAAM,MACjBR,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,WAAAO,EAAY,WAAAC,EAAY,WAAAC,CAAW,EAAIX,EAAI,KAC7CY,EAAc,MAAMd,EAAO,SAAS,OAAO,CAC/C,KAAM,CACJ,WAAAW,EACA,WAAAC,EACA,WAAAC,CACF,CACF,CAAC,EACDV,EAAI,KAAKW,CAAW,CACtB,OAASR,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAEaS,EAAS,MAAOb,EAAcC,EAAeC,IAAuB,CAChF,GAAI,CACF,GAAM,CAAE,GAAAI,CAAG,EAAIN,EAAI,OACb,CAAE,WAAAS,EAAY,WAAAC,EAAY,WAAAC,CAAW,EAAIX,EAAI,KAC7Cc,EAAkB,MAAMhB,EAAO,SAAS,OAAO,CACnD,MAAO,CACL,QAAS,SAASQ,CAAE,CACtB,EACA,KAAM,CACJ,WAAAG,EACA,WAAAC,EACA,WAAAC,CACF,CACF,CAAC,EACGG,EACFb,EAAI,KAAKa,CAAe,EAExBb,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,oBAAqB,CAAC,CAExD,OAASG,EAAO,CACfF,EAAKE,CAAK,CACX,CACD,EAEaW,EAAU,MACrBf,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,GAAAI,CAAG,EAAIN,EAAI,OACbgB,EAAkB,MAAMlB,EAAO,SAAS,OAAO,CACnD,MAAO,CACL,QAAS,SAASQ,CAAE,CACtB,CACF,CAAC,EACGU,EACFf,EAAI,KAAKe,CAAe,EAExBf,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,oBAAqB,CAAC,CAExD,OAASG,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,ED5FO,IAAMa,KAAiB,UAAO,EACrCA,EAAe,IAAI,IAAKC,CAAM,EAAE,IAAI,OAAOC,CAAO,EAAE,KAAK,IAAIC,CAAG,EAAE,IAAI,OAAOC,CAAM,EAAE,OAAO,OAAOC,CAAO,EEJ1G,IAAAC,EAAuB,mBCCvB,IAAAC,EAA6B,0BAEvBC,EAAS,IAAI,eAGNC,EAAe,MAC1BC,EACAC,EACAC,IACG,CACH,GAAI,CACF,IAAMC,EAAS,MAAML,EAAO,MAAM,SAAS,EAC3CG,EAAI,KAAKE,CAAM,CACjB,OAASC,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaC,EAAe,MAC1BL,EACAC,EACAC,IACG,CACH,GAAI,CACF,IAAMI,EAAKN,EAAI,OAAO,GAChBO,EAAQ,MAAMT,EAAO,MAAM,WAAW,CAC1C,MAAO,CACL,OAAQ,SAASQ,CAAE,CACrB,CACF,CAAC,EACDL,EAAI,KAAKM,CAAK,CAChB,OAASH,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaI,EAAc,MACzBR,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,QAAAO,EAAS,UAAAC,CAAU,EAAIV,EAAI,KAC7BW,EAAW,MAAMb,EAAO,MAAM,OAAO,CACzC,KAAM,CACJ,QAAS,SAASW,CAAO,EACzB,UAAW,SAASC,CAAS,CAC/B,CACF,CAAC,EACDT,EAAI,KAAKU,CAAQ,CACnB,OAASP,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaQ,EAAc,MACzBZ,EACAC,EACAC,IACG,CACH,GAAI,CACF,IAAMI,EAAKN,EAAI,OAAO,GAChB,CAAE,QAAAS,EAAS,UAAAC,CAAU,EAAIV,EAAI,KAC7Ba,EAAe,MAAMf,EAAO,MAAM,OAAO,CAC7C,MAAO,CACL,OAAQ,SAASQ,CAAE,CACrB,EACA,KAAM,CACJ,QAAS,SAASG,CAAO,EACzB,UAAW,SAASC,CAAS,CAC/B,CACF,CAAC,EACDT,EAAI,KAAKY,CAAY,CACvB,OAAST,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaU,EAAc,MACzBd,EACAC,EACAC,IACG,CACH,GAAI,CACF,IAAMI,EAAKN,EAAI,OAAO,GAChBe,EAAe,MAAMjB,EAAO,MAAM,OAAO,CAC7C,MAAO,CACL,OAAQ,SAASQ,CAAE,CACrB,CACF,CAAC,EACDL,EAAI,KAAKc,CAAY,CACvB,OAASX,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EDjGO,IAAMY,KAAc,UAAO,EAClCA,EACG,IAAI,IAAKC,CAAY,EACrB,IAAI,OAAQC,CAAY,EACxB,KAAK,IAAKC,CAAW,EACrB,IAAI,OAAQC,CAAW,EACvB,OAAO,OAAQC,CAAW,EER7B,IAAAC,EAAoB,sBCCpB,IAAAC,EAA6B,0BACvBC,EAAS,IAAI,eAGNC,EAAgB,MAC3BC,EACAC,EACAC,IACG,CACH,GAAI,CACF,IAAMC,EAAU,MAAML,EAAO,OAAO,SAAS,CAC3C,QAAS,CACP,OAAQ,GACR,KAAM,EACR,CACF,CAAC,EACDG,EAAI,KAAKE,CAAO,CAClB,OAASC,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaC,EAAgB,MAC3BL,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,GAAAI,CAAG,EAAIN,EAAI,OACbO,EAAS,MAAMT,EAAO,OAAO,WAAW,CAC5C,MAAO,CAAE,UAAW,OAAOQ,CAAE,CAAE,EAC/B,QAAS,CACP,OAAQ,GACR,KAAM,EACR,CACF,CAAC,EACD,GAAI,CAACC,EACH,OAAON,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,kBAAmB,CAAC,EAE7DA,EAAI,KAAKM,CAAM,CACjB,OAASH,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaI,EAAe,MAC1BR,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,aAAAO,EAAc,aAAAC,CAAa,EAAIV,EAAI,KACrCW,EAAY,MAAMb,EAAO,OAAO,OAAO,CAC3C,KAAM,CACJ,aAAAW,EACA,aAAAC,CACF,CACF,CAAC,EACDT,EAAI,OAAO,GAAG,EAAE,KAAKU,CAAS,CAChC,OAASP,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaQ,EAAe,MAC1BZ,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,GAAAI,CAAG,EAAIN,EAAI,OACb,CAAE,aAAAS,EAAc,aAAAC,CAAa,EAAIV,EAAI,KACrCa,EAAgB,MAAMf,EAAO,OAAO,OAAO,CAC/C,MAAO,CAAE,UAAW,OAAOQ,CAAE,CAAE,EAC/B,KAAM,CACJ,aAAAG,EACA,aAAAC,CACF,CACF,CAAC,EACD,GAAI,CAACG,EACH,OAAOZ,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,kBAAmB,CAAC,EAE7DA,EAAI,KAAKY,CAAa,CACxB,OAAST,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaU,EAAe,MAC1Bd,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,GAAAI,CAAG,EAAIN,EAAI,OACbe,EAAgB,MAAMjB,EAAO,OAAO,OAAO,CAC/C,MAAO,CAAE,UAAW,OAAOQ,CAAE,CAAE,CACjC,CAAC,EACD,GAAI,CAACS,EACH,OAAOd,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,kBAAmB,CAAC,EAE7DA,EAAI,KAAKc,CAAa,CACxB,OAASX,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EDrGO,IAAMY,EAAS,EAAAC,QAAQ,OAAO,EAErCD,EAAO,IAAI,IAAKE,CAAa,EAC7BF,EAAO,IAAI,OAAQG,CAAa,EAChCH,EAAO,KAAK,IAAKI,CAAY,EAC7BJ,EAAO,IAAI,OAAQK,CAAY,EAC/BL,EAAO,OAAO,OAAQM,CAAY,EEflC,IAAAC,GAAoB,sBCCpB,IAAAC,EAA6B,0BACvBC,EAAS,IAAI,eAGNC,EAAa,MACxBC,EACAC,EACAC,IACG,CACH,GAAI,CACF,IAAMC,EAAO,MAAML,EAAO,IAAI,SAAS,CACrC,QAAS,CACP,SAAU,GACV,OAAQ,EACV,CACF,CAAC,EACDG,EAAI,KAAKE,CAAI,CACf,OAASC,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaC,EAAc,MACzBL,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,WAAAI,EAAY,SAAAC,CAAS,EAAIP,EAAI,OAC/BQ,EAAM,MAAMV,EAAO,IAAI,WAAW,CACtC,MAAO,CACL,kBAAmB,CACjB,QAAS,OAAOQ,CAAU,EAC1B,UAAW,OAAOC,CAAQ,CAC5B,CACF,EACA,QAAS,CACP,SAAU,GACV,OAAQ,EACV,CACF,CAAC,EACD,GAAI,CAACC,EACH,OAAOP,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,eAAgB,CAAC,EAE1DA,EAAI,KAAKO,CAAG,CACd,OAASJ,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaK,GAAY,MACvBT,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,QAAAQ,EAAS,UAAAC,EAAW,IAAAH,CAAI,EAAIR,EAAI,KAClCY,EAAS,MAAMd,EAAO,IAAI,OAAO,CACrC,KAAM,CACJ,QAAAY,EACA,UAAAC,EACA,IAAAH,CACF,CACF,CAAC,EACDP,EAAI,OAAO,GAAG,EAAE,KAAKW,CAAM,CAC7B,OAASR,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaS,GAAY,MACvBb,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,WAAAI,EAAY,SAAAC,CAAS,EAAIP,EAAI,OAC/B,CAAE,IAAAQ,CAAI,EAAIR,EAAI,KACdc,EAAa,MAAMhB,EAAO,IAAI,OAAO,CACzC,MAAO,CACL,kBAAmB,CACjB,QAAS,OAAOQ,CAAU,EAC1B,UAAW,OAAOC,CAAQ,CAC5B,CACF,EACA,KAAM,CACJ,IAAAC,CACF,CACF,CAAC,EACD,GAAI,CAACM,EACH,OAAOb,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,eAAgB,CAAC,EAE1DA,EAAI,KAAKa,CAAU,CACrB,OAASV,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaW,GAAY,MACvBf,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,WAAAI,EAAY,SAAAC,CAAS,EAAIP,EAAI,OAC/BgB,EAAa,MAAMlB,EAAO,IAAI,OAAO,CACzC,MAAO,CACL,kBAAmB,CACjB,QAAS,OAAOQ,CAAU,EAC1B,UAAW,OAAOC,CAAQ,CAC5B,CACF,CACF,CAAC,EACD,GAAI,CAACS,EACH,OAAOf,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,eAAgB,CAAC,EAE1DA,EAAI,KAAKe,CAAU,CACrB,OAASZ,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EDpHO,IAAMa,EAAS,GAAAC,QAAQ,OAAO,EAErCD,EAAO,IAAI,IAAKE,CAAU,EAC1BF,EAAO,IAAI,yBAA0BG,CAAW,EAChDH,EAAO,KAAK,IAAKI,EAAS,EAC1BJ,EAAO,IAAI,yBAA0BK,EAAS,EAC9CL,EAAO,OAAO,yBAA0BM,EAAS,EEfjD,IAAAC,GAAoB,sBCCpB,IAAAC,GAA6B,0BACvBC,EAAS,IAAI,gBAGNC,GAAc,MACzBC,EACAC,EACAC,IACG,CACH,GAAI,CACF,IAAMC,EAAQ,MAAML,EAAO,KAAK,SAAS,CACvC,QAAS,CACP,KAAM,GACN,SAAU,EACZ,CACF,CAAC,EACDG,EAAI,KAAKE,CAAK,CAChB,OAASC,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaC,GAAc,MACzBL,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,GAAAI,CAAG,EAAIN,EAAI,OACbO,EAAO,MAAMT,EAAO,KAAK,WAAW,CACxC,MAAO,CAAE,QAAS,OAAOQ,CAAE,CAAE,EAC7B,QAAS,CACP,KAAM,GACN,SAAU,EACZ,CACF,CAAC,EACD,GAAI,CAACC,EACH,OAAON,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,qBAAsB,CAAC,EAEhEA,EAAI,KAAKM,CAAI,CACf,OAASH,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaI,GAAa,MACxBR,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,UAAAO,EAAW,UAAAC,EAAW,WAAAC,EAAY,WAAAC,EAAY,QAAAC,CAAQ,EAAIb,EAAI,KAChEc,EAAU,MAAMhB,EAAO,KAAK,OAAO,CACvC,KAAM,CACJ,UAAAW,EACA,UAAAC,EACA,WAAAC,EACA,WAAAC,EACA,QAAAC,CACF,CACF,CAAC,EACDZ,EAAI,OAAO,GAAG,EAAE,KAAKa,CAAO,CAC9B,OAASV,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaW,GAAa,MACxBf,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,GAAAI,CAAG,EAAIN,EAAI,OACb,CAAE,UAAAS,EAAW,UAAAC,EAAW,WAAAC,EAAY,WAAAC,EAAY,QAAAC,CAAQ,EAAIb,EAAI,KAChEgB,EAAc,MAAMlB,EAAO,KAAK,OAAO,CAC3C,MAAO,CAAE,QAAS,OAAOQ,CAAE,CAAE,EAC7B,KAAM,CACJ,UAAAG,EACA,UAAAC,EACA,WAAAC,EACA,WAAAC,EACA,QAAAC,CACF,CACF,CAAC,EACD,GAAI,CAACG,EACH,OAAOf,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,qBAAsB,CAAC,EAEhEA,EAAI,KAAKe,CAAW,CACtB,OAASZ,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaa,GAAa,MACxBjB,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,GAAAI,CAAG,EAAIN,EAAI,OACbkB,EAAc,MAAMpB,EAAO,KAAK,OAAO,CAC3C,MAAO,CAAE,QAAS,OAAOQ,CAAE,CAAE,CAC/B,CAAC,EACD,GAAI,CAACY,EACH,OAAOjB,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,qBAAsB,CAAC,EAEhEA,EAAI,KAAKiB,CAAW,CACtB,OAASd,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,ED3GO,IAAMe,EAAS,GAAAC,QAAQ,OAAO,EAErCD,EAAO,IAAI,IAAKE,EAAW,EAC3BF,EAAO,IAAI,OAAQG,EAAW,EAC9BH,EAAO,KAAK,IAAKI,EAAU,EAC3BJ,EAAO,IAAI,OAAQK,EAAU,EAC7BL,EAAO,OAAO,OAAQM,EAAU,EEfhC,IAAAC,GAAoB,sBCEpB,IAAAC,GAA6B,0BACvBC,EAAS,IAAI,gBAINC,GAAc,MACzBC,EACAC,EACAC,IACG,CACH,GAAI,CACF,IAAMC,EAAQ,MAAML,EAAO,KAAK,SAAS,CACvC,QAAS,CACP,MAAO,EACT,CACF,CAAC,EACDG,EAAI,KAAKE,CAAK,CAChB,OAASC,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaC,GAAc,MACzBL,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,GAAAI,CAAG,EAAIN,EAAI,OACbO,EAAO,MAAMT,EAAO,KAAK,WAAW,CACxC,MAAO,CAAE,QAAS,OAAOQ,CAAE,CAAE,EAC7B,QAAS,CACP,MAAO,EACT,CACF,CAAC,EACD,GAAI,CAACC,EACH,OAAON,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,gBAAiB,CAAC,EAE3DA,EAAI,KAAKM,CAAI,CACf,OAASH,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaI,GAAa,MACxBR,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,WAAAO,EAAY,WAAAC,EAAY,UAAAC,CAAU,EAAIX,EAAI,KAC5CY,EAAU,MAAMd,EAAO,KAAK,OAAO,CACvC,KAAM,CACJ,WAAAW,EACA,WAAAC,EACA,UAAAC,CACF,CACF,CAAC,EACDV,EAAI,OAAO,GAAG,EAAE,KAAKW,CAAO,CAC9B,OAASR,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaS,GAAa,MACxBb,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,GAAAI,CAAG,EAAIN,EAAI,OACb,CAAE,WAAAS,EAAY,WAAAC,EAAY,UAAAC,CAAU,EAAIX,EAAI,KAC5Cc,EAAc,MAAMhB,EAAO,KAAK,OAAO,CAC3C,MAAO,CAAE,QAAS,OAAOQ,CAAE,CAAE,EAC7B,KAAM,CACJ,WAAAG,EACA,WAAAC,EACA,UAAAC,CACF,CACF,CAAC,EACD,GAAI,CAACG,EACH,OAAOb,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,gBAAiB,CAAC,EAE3DA,EAAI,KAAKa,CAAW,CACtB,OAASV,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaW,GAAa,MACxBf,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,GAAAI,CAAG,EAAIN,EAAI,OACbgB,EAAc,MAAMlB,EAAO,KAAK,OAAO,CAC3C,MAAO,CAAE,QAAS,OAAOQ,CAAE,CAAE,CAC/B,CAAC,EACD,GAAI,CAACU,EACH,OAAOf,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,gBAAiB,CAAC,EAE3DA,EAAI,KAAKe,CAAW,CACtB,OAASZ,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EDvGO,IAAMa,EAAS,GAAAC,QAAQ,OAAO,EAErCD,EAAO,IAAI,IAAKE,EAAW,EAC3BF,EAAO,IAAI,OAAQG,EAAW,EAC9BH,EAAO,KAAK,IAAKI,EAAU,EAC3BJ,EAAO,IAAI,OAAQK,EAAU,EAC7BL,EAAO,OAAO,OAAQM,EAAU,EEfhC,IAAAC,GAAoB,sBCCpB,IAAAC,GAA6B,0BACvBC,EAAS,IAAI,gBAENC,GAAc,MACzBC,EACAC,EACAC,IACG,CACH,GAAI,CACF,IAAMC,EAAQ,MAAML,EAAO,KAAK,SAAS,CACvC,QAAS,CACP,MAAO,EACT,CACF,CAAC,EACDG,EAAI,KAAKE,CAAK,CAChB,OAASC,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaC,GAAc,MACzBL,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,GAAAI,CAAG,EAAIN,EAAI,OACbO,EAAO,MAAMT,EAAO,KAAK,WAAW,CACxC,MAAO,CAAE,QAAS,OAAOQ,CAAE,CAAE,EAC7B,QAAS,CACP,MAAO,EACT,CACF,CAAC,EACD,GAAI,CAACC,EACH,OAAON,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,gBAAiB,CAAC,EAE3DA,EAAI,KAAKM,CAAI,CACf,OAASH,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaI,GAAa,MACxBR,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,UAAAO,EAAW,IAAAC,EAAK,SAAAC,EAAU,YAAAC,EAAa,OAAAC,CAAO,EAAIb,EAAI,KACxDc,EAAU,MAAMhB,EAAO,KAAK,OAAO,CACvC,KAAM,CACJ,UAAAW,EACA,IAAAC,EACA,SAAAC,EACA,YAAAC,EACA,OAAAC,CACF,CACF,CAAC,EACDZ,EAAI,OAAO,GAAG,EAAE,KAAKa,CAAO,CAC9B,OAASV,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaW,GAAa,MACxBf,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,GAAAI,CAAG,EAAIN,EAAI,OACb,CAAE,UAAAS,EAAW,IAAAC,EAAK,SAAAC,EAAU,YAAAC,EAAa,OAAAC,CAAO,EAAIb,EAAI,KACxDgB,EAAc,MAAMlB,EAAO,KAAK,OAAO,CAC3C,MAAO,CAAE,QAAS,OAAOQ,CAAE,CAAE,EAC7B,KAAM,CACJ,UAAAG,EACA,IAAAC,EACA,SAAAC,EACA,YAAAC,EACA,OAAAC,CACF,CACF,CAAC,EACD,GAAI,CAACG,EACH,OAAOf,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,gBAAiB,CAAC,EAE3DA,EAAI,KAAKe,CAAW,CACtB,OAASZ,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaa,GAAa,MACxBjB,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,GAAAI,CAAG,EAAIN,EAAI,OACbkB,EAAc,MAAMpB,EAAO,KAAK,OAAO,CAC3C,MAAO,CAAE,QAAS,OAAOQ,CAAE,CAAE,CAC/B,CAAC,EACD,GAAI,CAACY,EACH,OAAOjB,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,gBAAiB,CAAC,EAE3DA,EAAI,KAAKiB,CAAW,CACtB,OAASd,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EDxGO,IAAMe,EAAS,GAAAC,QAAQ,OAAO,EAErCD,EAAO,IAAI,IAAKE,EAAW,EAC3BF,EAAO,IAAI,OAAQG,EAAW,EAC9BH,EAAO,KAAK,IAAKI,EAAU,EAC3BJ,EAAO,IAAI,OAAQK,EAAU,EAC7BL,EAAO,OAAO,OAAQM,EAAU,EEfhC,IAAAC,GAAoB,sBCCpB,IAAAC,GAA6B,0BACvBC,EAAS,IAAI,gBAGNC,GAAiB,MAC5BC,EACAC,EACAC,IACG,CACH,GAAI,CACF,IAAMC,EAAW,MAAML,EAAO,SAAS,SAAS,CAC9C,QAAS,CACP,KAAM,GACN,MAAO,EACT,CACF,CAAC,EACDG,EAAI,KAAKE,CAAQ,CACnB,OAASC,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaC,GAAmB,MAC9BL,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,OAAAI,EAAQ,QAAAC,CAAQ,EAAIP,EAAI,OAC1BQ,EAAU,MAAMV,EAAO,SAAS,WAAW,CAC/C,MAAO,CACL,eAAgB,CACd,QAAS,OAAOQ,CAAM,EACtB,OAAQ,OAAOC,CAAO,CACxB,CACF,EACA,QAAS,CACP,KAAM,GACN,MAAO,EACT,CACF,CAAC,EACD,GAAI,CAACC,EACH,OAAOP,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,6BAA8B,CAAC,EAExEA,EAAI,KAAKO,CAAO,CAClB,OAASJ,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaK,GAAiB,MAC5BT,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,QAAAQ,EAAS,OAAAC,CAAO,EAAIX,EAAI,KAC1BY,EAAa,MAAMd,EAAO,SAAS,OAAO,CAC9C,KAAM,CACJ,QAAAY,EACA,OAAAC,CACF,CACF,CAAC,EACDV,EAAI,OAAO,GAAG,EAAE,KAAKW,CAAU,CACjC,OAASR,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EAGaS,GAAiB,MAC5Bb,EACAC,EACAC,IACG,CACH,GAAI,CACF,GAAM,CAAE,OAAAI,EAAQ,QAAAC,CAAQ,EAAIP,EAAI,OAC1Bc,EAAiB,MAAMhB,EAAO,SAAS,OAAO,CAClD,MAAO,CACL,eAAgB,CACd,QAAS,OAAOQ,CAAM,EACtB,OAAQ,OAAOC,CAAO,CACxB,CACF,CACF,CAAC,EACD,GAAI,CAACO,EACH,OAAOb,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,QAAS,6BAA8B,CAAC,EAExEA,EAAI,KAAKa,CAAc,CACzB,OAASV,EAAO,CACdF,EAAKE,CAAK,CACZ,CACF,EDvFO,IAAMW,EAAS,GAAAC,QAAQ,OAAO,EAErCD,EAAO,IAAI,IAAKE,EAAc,EAC9BF,EAAO,IAAI,oBAAqBG,EAAgB,EAChDH,EAAO,KAAK,IAAKI,EAAc,EAC/BJ,EAAO,OAAO,oBAAqBK,EAAc,EEP1C,IAAMC,GAAe,CAC1BC,EACAC,EACAC,EACAC,IACG,CACH,IAAIC,EAASJ,EAAI,QAAU,IAE3B,OAAQI,EAAQ,CACd,IAAK,KAEH,OAAOF,EAAI,OAAOE,CAAM,EAAE,KAAK,CAAE,QADjB,aACyB,CAAC,EAE5C,IAAK,KAEH,OAAOF,EAAI,OAAOE,CAAM,EAAE,KAAK,CAAE,QADjB,cACyB,CAAC,EAE5C,IAAK,KAEH,OAAOF,EAAI,OAAOE,CAAM,EAAE,KAAK,CAAE,QADjB,WACyB,CAAC,EAE5C,IAAK,KAEH,OAAOF,EAAI,OAAOE,CAAM,EAAE,KAAK,CAAE,QADjB,WACyB,CAAC,CAE9C,CAEA,eAAQ,MAAMJ,CAAG,EAGVE,EAAI,OAAOE,CAAM,EAAE,KAAK,CAAE,QADjB,+CACyB,CAAC,CAC5C,EjB1BA,IAAMC,KAAM,EAAAC,SAAQ,EAEpBD,EAAI,IAAI,EAAAC,QAAQ,KAAK,CAAC,EACtBD,EAAI,IAAI,aAAcE,CAAc,EACpCF,EAAI,IAAI,UAAWG,CAAW,EAC9BH,EAAI,IAAI,WAAYI,CAAa,EACjCJ,EAAI,IAAI,QAASI,CAAU,EAC3BJ,EAAI,IAAI,SAAUI,CAAU,EAC5BJ,EAAI,IAAI,SAAUI,CAAU,EAC5BJ,EAAI,IAAI,SAAUI,CAAU,EAC5BJ,EAAI,IAAI,YAAaI,CAAc,EACnCJ,EAAI,IAAIK,EAAY,EAEpBL,EAAI,IAAI,IAAK,CAACM,EAAKC,IAAQ,CACzBA,EAAI,KAAK,cAAc,CACzB,CAAC,EAEDP,EAAI,OAAO,GAAI",
  "names": ["import_express", "import_express", "import_client", "prisma", "getall", "req", "res", "next", "customers", "error", "getbyid", "id", "customer", "add", "cust_fname", "cust_lname", "contact_no", "newCustomer", "update", "updatedCustomer", "deletee", "deletedCustomer", "customerRoutes", "getall", "getbyid", "add", "update", "deletee", "import_express", "import_client", "prisma", "getAllOrders", "req", "res", "next", "orders", "error", "getOrderById", "id", "order", "createOrder", "cust_id", "waiter_id", "newOrder", "updateOrder", "updatedOrder", "deleteOrder", "deletedOrder", "orderRoutes", "getAllOrders", "getOrderById", "createOrder", "updateOrder", "deleteOrder", "import_express", "import_client", "prisma", "getAllWaiters", "req", "res", "next", "waiters", "error", "getWaiterById", "id", "waiter", "createWaiter", "waiter_fname", "waiter_lname", "newWaiter", "updateWaiter", "updatedWaiter", "deleteWaiter", "deletedWaiter", "router", "express", "getAllWaiters", "getWaiterById", "createWaiter", "updateWaiter", "deleteWaiter", "import_express", "import_client", "prisma", "getAllTips", "req", "res", "next", "tips", "error", "getTipByIds", "customerId", "waiterId", "tip", "createTip", "cust_id", "waiter_id", "newTip", "updateTip", "updatedTip", "deleteTip", "deletedTip", "router", "express", "getAllTips", "getTipByIds", "createTip", "updateTip", "deleteTip", "import_express", "import_client", "prisma", "getAllFoods", "req", "res", "next", "foods", "error", "getFoodById", "id", "food", "createFood", "item_name", "item_type", "item_price", "item_stock", "chef_id", "newFood", "updateFood", "updatedFood", "deleteFood", "deletedFood", "router", "express", "getAllFoods", "getFoodById", "createFood", "updateFood", "deleteFood", "import_express", "import_client", "prisma", "getAllChefs", "req", "res", "next", "chefs", "error", "getChefById", "id", "chef", "createChef", "chef_fname", "chef_lname", "chef_type", "newChef", "updateChef", "updatedChef", "deleteChef", "deletedChef", "router", "express", "getAllChefs", "getChefById", "createChef", "updateChef", "deleteChef", "import_express", "import_client", "prisma", "getAllBills", "req", "res", "next", "bills", "error", "getBillById", "id", "bill", "createBill", "tot_price", "tax", "discount", "net_payable", "ord_no", "newBill", "updateBill", "updatedBill", "deleteBill", "deletedBill", "router", "express", "getAllBills", "getBillById", "createBill", "updateBill", "deleteBill", "import_express", "import_client", "prisma", "getAllContains", "req", "res", "next", "contains", "error", "getContainsByIds", "itemId", "orderId", "contain", "createContains", "item_no", "ord_no", "newContain", "deleteContains", "deletedContain", "router", "express", "getAllContains", "getContainsByIds", "createContains", "deleteContains", "errorHandler", "err", "req", "res", "next", "status", "app", "express", "customerRoutes", "orderRoutes", "router", "errorHandler", "req", "res"]
}
